LoadFunctionLibrary("SelectionAnalyses/aBSREL.bf", {
    "0": "Universal",
    "1": PATH_TO_CURRENT_BF + "data/CD2.nex",
    "2": "All",
});

function check_keys() {

    // Ensure that all top-level keys exists
    assert(utility.KeyExists(absrel.json, terms.json.fits), "fits not found");
    assert(utility.KeyExists(absrel.json, terms.json.timers), "timers not found");
    assert(utility.KeyExists(absrel.json, terms.json.input), "input not found");
    assert(utility.KeyExists(absrel.json, terms.json.test_results), "test results not found");
    assert(utility.KeyExists(absrel.json, terms.json.tested), "tested not found");
    assert(utility.KeyExists(absrel.json, terms.json.partitions), "partitions not found");
    assert(utility.KeyExists(absrel.json, terms.json.branch_attributes), "branch attributes not found");

}

function check_results() {
    assert((absrel.json[terms.json.test_results])[terms.json.positive] == 3, "positive test results is not equal to 3");

    // Make sure that COW, HORSE, and CAT are detected
    branch_attributes = (absrel.json[terms.json.branch_attributes])["0"];
    assert((branch_attributes["COW"])[terms.json.corrected_pvalue] < 0.05, "COW wasn't detected");
    assert((branch_attributes["HORSE"])[terms.json.corrected_pvalue] < 0.05, "HORSE wasn't detected");
    assert((branch_attributes["CAT"])[terms.json.corrected_pvalue] < 0.05, "CAT wasn't detected");

}

check_keys();
check_results();
