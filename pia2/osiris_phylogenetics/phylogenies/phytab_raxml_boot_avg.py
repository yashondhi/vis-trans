#!/usr/bin/env python


"""
Finds bootstrap probabilities (support values from 0 to 100) in a
Phytab file with phylogenetic trees generated by RAxML, and averages
them. The probabilities are found between brackets ('[]') in the 
output at the ends of branches; each branch is weighed equally.

Usage: python average_per_tree.py [PHY_INPUT] [OUTPUT] 
"""

import sys


def get_tree_info(my_tree):
  """
  Splits a tree into pieces delimited by the end bracket (']').
  The numerical characters at the end of each piece represent the
  relevant bootstrap support values. These characters are captured
  and cast to float, and then summed up. Once every support value
  has been captured the mean of them is calculated, and a dictionary
  with each tree's name and mean support value is returned.
  """
  name = my_tree.split()[0]
  branches = my_tree.split(']')
  sum = 0; count = 0
  for branch in branches:
    for i in range(-1, -len(branch), -1):
      if not ''.join(branch[i:]).isdigit():
        if branch[-1].isdigit():
          sum = sum + float(''.join(branch[(i+1):]))
          count+=1
        break
    avg = sum / count;
  return {'tree_name': name, 'tree_avg': avg}


trees_info = []
"""
Process input; each line corresponds to a tree, and is passed to
get_tree_info().
"""
with open(sys.argv[1], 'r') as f:
  while True:
    tree = f.readline()
    if not tree:
      break
    info = get_tree_info(tree)
    trees_info.append(info)
  f.close()
"""
Format each dict with output data and output to file.
"""
with open(sys.argv[2], 'w') as out:
  for tree_details in trees_info:
    out.write(tree_details['tree_name'] + '\t' +
              str(tree_details['tree_avg']) + '\n')
  out.close() 
